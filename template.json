{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "west europe",
      "metadata": {
        "description": "Deployment location"
      }
    },
    "adminPassword": {
      "metadata": {
        "description": "Administrator password"
      },
      "defaultValue": "",
      "type": "securestring"
    },
    "authenticationType": {
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "defaultValue": "password",
      "metadata": {
        "description": "Authentication type"
      },
      "type": "string"
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Name of existing storage account"
      }
    },
    "storageAccountNewOrExisting": {
      "type": "string",
      "defaultValue": "existing",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "Description": "Indicates whether the Storage Account is new or existing"
      }
    },
    "storageAccountType": {
      "type": "string",
      "metadata": {
        "description": "The type of the Storage Account created"
      },
      "defaultValue": "Standard_LRS"
    },
    "existingStorageAccountRG": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the existing storage account"
      },
      "defaultValue": ""
    },
    "offer": {
      "allowedValues": [
        "R7730BYOL",
        "R7730PAYG"
      ],
      "defaultValue": "R7730BYOL",
      "metadata": {
        "description": "Offer version and type"
      },
      "type": "string"
    },
    "sshPublicKey": {
      "defaultValue": "",
      "metadata": {
        "description": "Administrator SSH public key"
      },
      "type": "string"
    },
    "clusterName": {
      "metadata": {
        "description": "Name of the Check Point Cluster"
      },
      "type": "string"
    },
    "vmSize": {
      "defaultValue": "Standard_D3",
      "metadata": {
        "description": "Size of the VM"
      },
      "type": "string"
    },
    "sicKey": {
      "type": "securestring",
      "metadata": {
        "description": "One time key for Secure Internal Communication"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network"
      },
      "defaultValue": ""
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the virtual network"
      },
      "defaultValue": ""
    },
    "domainNameLabel": {
      "type": "string",
      "metadata": {
        "description": "the domain label"
      },
      "defaultValue": ""
    },
    "Subnet1Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the 1st subnet"
      },
      "defaultValue": ""
    },
    "Subnet1Prefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the 1st subnet"
      },
      "defaultValue": ""
    },
    "Subnet1StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first avaialable address on the 1st subnet"
      },
      "defaultValue": ""
    },
    "Subnet2Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the 2nd subnet"
      },
      "defaultValue": ""
    },
    "Subnet2Prefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the 2nd subnet"
      },
      "defaultValue": ""
    },
    "Subnet2StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first avaialable address on the 2nd subnet"
      },
      "defaultValue": ""
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "existing",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "Description": "Indicates whether the virtual network is new or existing"
      }
    },
    "virtualNetworkExistingRGName": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the existing virtual network"
      },
      "defaultValue": ""
    },
    "baseUrl": {
      "type": "string",
      "metadata": {
        "artifactsBaseUrl": ""
      },
      "defaultValue": "https://gallery.azure.com/artifact/20151001/checkpoint.vseccluster-byol.1.0.14/Artifacts"
    },
    "Check_PointTags": {
      "type": "object",
      "defaultValue": {
        "provider": "30DE18BC-F9F6-4F22-9D30-54B8E74CFD5F"
      }
    }
  },
  "variables": {
    "computeApiVersion": "2016-03-30",
    "storageApiVersion": "2016-01-01",
    "networkApiVersion": "2016-06-01",
    "deploymentsApiVersion": "2016-02-01",
    "storageAccountNameexisting": "[parameters('storageAccountName')]",
    "storageAccountNamenew": "[trim(substring(concat(parameters('storageAccountName'), uniqueString(resourceGroup().id, deployment().name), '                        '), 0, 24))]",
    "storageAccountName": "[variables(concat('storageAccountName', parameters('storageAccountNewOrExisting')))]",
    "storageAccountUri": "[concat('http://', variables('storageAccountName'), '.blob.core.windows.net')]",
    "storageAccountSetupURL": "[concat(parameters('baseUrl'),'/storageAccount-', parameters('storageAccountNewOrExisting'), '.json')]",
    "networkSetupURL": "[concat(parameters('baseUrl'),'/vnet-', parameters('vnetNewOrExisting'), '.json')]",
    "customData": "[concat('#!/bin/bash\n', '\n', 'subscriptionId=\"', subscription().subscriptionId, '\"', '\n', 'tenantId=\"', subscription().tenantId, '\"', '\n', 'resourceGroup=\"', resourceGroup().name, '\"', '\n', 'virtualNetwork=\"', parameters('virtualNetworkName'), '\"', '\n', 'clusterName=\"', parameters('clusterName'), '\"', '\n', 'lbName=\"', variables('lbName'), '\"', '\n', 'environment=\"AzureCloud\"\n', '\n', 'cat <<EOF >\"$FWDIR/conf/azure-ha.json\"\n', '{\n', '  \"debug\": false,\n', '  \"subscriptionId\": \"$subscriptionId\",\n', '  \"environment\": \"$environment\",\n', '  \"resourceGroup\": \"$resourceGroup\",\n', '  \"credentials\": {\n', '    \"tenant\": \"$tenantId\",\n', '    \"grant_type\": \"client_credentials\",\n', '    \"client_id\": \"\",\n', '    \"client_secret\": \"\"\n', '  },\n', '  \"proxy\": \"\",\n', '  \"virtualNetwork\": \"$virtualNetwork\",\n', '  \"clusterName\": \"$clusterName\",\n', '  \"lbName\": \"$lbName\"\n', '}\n', 'EOF\n', '\n', 'sicKey=\"', parameters('sicKey'), '\"', '\n', 'conf=\"install_security_gw=true\"\n', 'conf=\"${conf}&install_ppak=true\"\n', 'conf=\"${conf}&gateway_cluster_member=true\"\n', 'conf=\"${conf}&install_security_managment=false\"\n', 'conf=\"${conf}&ftw_sic_key=$sicKey\"\n', '\n', 'config_system -s \"$conf\"\n', 'shutdown -r now\n')]",
    "imageOffer": "check-point-r77-10",
    "imagePublisher": "checkpoint",
    "imageReference": "[variables(concat('imageReference', parameters('offer')))]",
    "imageReferenceR7730BYOL": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-byol",
      "version": "latest"
    },
    "imageReferenceR7730PAYG": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp",
      "version": "latest"
    },
    "lbId": "[resourceId('Microsoft.Network/loadBalancers', variables('lbName'))]",
    "lbName": "frontend-lb",
    "nic1Name": "external",
    "nic2Name": "int0",
    "linuxConfigurationpassword": {},
    "linuxConfigurationsshPublicKey": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "keyData": "[parameters('sshPublicKey')]",
            "path": "/home/notused/.ssh/authorized_keys"
          }
        ]
      }
    },
    "linuxConfiguration": "[variables(concat('linuxConfiguration',parameters('authenticationType')))]",
    "plan": "[variables(concat('plan', parameters('offer')))]",
    "planR7730BYOL": {
      "name": "sg-byol",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planR7730PAYG": {
      "name": "sg-ngtp",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "externalPrivateAddresses": [
      "[parameters('Subnet1StartAddress')]",
      "[concat(split(parameters('Subnet1StartAddress'), '.')[0],'.', split(parameters('Subnet1StartAddress'), '.')[1],'.', split(parameters('Subnet1StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet1StartAddress'), '.')[3]),1)))]"
    ],
    "subnet2PrivateAddresses": [
      "[parameters('Subnet2StartAddress')]",
      "[concat(split(parameters('Subnet2StartAddress'), '.')[0],'.', split(parameters('Subnet2StartAddress'), '.')[1],'.', split(parameters('Subnet2StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet2StartAddress'), '.')[3]),1)))]"
    ],
    "publicIPAddressName": "[parameters('clusterName')]",
    "publicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]",
    "publicIPAddressName1": "[concat(parameters('clusterName'), 1)]",
    "publicIPAddressId1": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName1'))]",
    "publicIPAddressName2": "[concat(parameters('clusterName'), 2)]",
    "publicIPAddressId2": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName2'))]",
    "availabilitySetName": "[concat(parameters('clusterName'), '-AvailabilitySet')]",
    "count": 2,
    "frontEndIPConfMember1Id": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd1')]",
    "frontEndIPConfMember2Id": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd2')]",
    "member1IPConfigId": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd1')]",
    "member2IPConfigId": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd2')]"
  },
  "resources": [
    {
      "name": "storageAccountSetup",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('storageAccountSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountType": {
            "value": "[parameters('storageAccountType')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "apiVersion": {
            "value": "[variables('storageApiVersion')]"
          }
        }
      }
    },
    {
      "name": "networkSetup",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('networkSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "apiVersion": {
            "value": "[variables('networkApiVersion')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefix')]"
          },
          "Subnet1Name": {
            "value": "[parameters('Subnet1Name')]"
          },
          "Subnet1Prefix": {
            "value": "[parameters('Subnet1Prefix')]"
          },
          "Subnet1StartAddress": {
            "value": "[parameters('Subnet1StartAddress')]"
          },
          "Subnet2Name": {
            "value": "[parameters('Subnet2Name')]"
          },
          "Subnet2Prefix": {
            "value": "[parameters('Subnet2Prefix')]"
          },
          "Subnet2StartAddress": {
            "value": "[parameters('Subnet2StartAddress')]"
          },
          "vnetNewOrExisting": {
            "value": "[parameters('vnetNewOrExisting')]"
          },
          "virtualNetworkExistingRGName": {
            "value": "[parameters('virtualNetworkExistingRGName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[parameters('location')]",
      "name": "[variables('availabilitySetName')]",
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[parameters('location')]",
      "name": "[variables('publicIPAddressName')]",
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[parameters('domainNameLabel')]"
        }
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[parameters('location')]",
      "name": "[concat(parameters('clusterName'), copyIndex(1))]",
      "copy": {
        "name": "publicAddressCopy",
        "count": "[variables('count')]"
      },
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[parameters('domainNameLabel')]"
        }
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "publicAddressCopy"
      ],
      "location": "[parameters('location')]",
      "name": "[variables('lbName')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[concat('LoadBalancerFrontEnd', 1)]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables(concat('publicIPAddressId', 1))]"
              }
            }
          },
          {
            "name": "[concat('LoadBalancerFrontEnd', 2)]",
            "properties": {
              "publicIPAddress": {
                "id": "[variables(concat('publicIPAddressId', 2))]"
              }
            }
          }
        ],
        "inboundNatRules": [
          {
            "name": "checkpoint-SSH1",
            "properties": {
              "backendPort": 22,
              "frontendIPConfiguration": {
                "id": "[variables('member1IPConfigId')]"
              },
              "frontendPort": 22,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-SSH2",
            "properties": {
              "backendPort": 22,
              "frontendIPConfiguration": {
                "id": "[variables('member2IPConfigId')]"
              },
              "frontendPort": 22,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-WEBUI1",
            "properties": {
              "backendPort": 443,
              "frontendIPConfiguration": {
                "id": "[variables('member1IPConfigId')]"
              },
              "frontendPort": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-WEBUI2",
            "properties": {
              "backendPort": 443,
              "frontendIPConfiguration": {
                "id": "[variables('member2IPConfigId')]"
              },
              "frontendPort": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-FWD1",
            "properties": {
              "backendPort": 256,
              "frontendIPConfiguration": {
                "id": "[variables('member1IPConfigId')]"
              },
              "frontendPort": 256,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-FWD2",
            "properties": {
              "backendPort": 256,
              "frontendIPConfiguration": {
                "id": "[variables('member2IPConfigId')]"
              },
              "frontendPort": 256,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-CPD1",
            "properties": {
              "backendPort": 18191,
              "frontendIPConfiguration": {
                "id": "[variables('member1IPConfigId')]"
              },
              "frontendPort": 18191,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-CPD2",
            "properties": {
              "backendPort": 18191,
              "frontendIPConfiguration": {
                "id": "[variables('member2IPConfigId')]"
              },
              "frontendPort": 18191,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-AMON1",
            "properties": {
              "backendPort": 18192,
              "frontendIPConfiguration": {
                "id": "[variables('member1IPConfigId')]"
              },
              "frontendPort": 18192,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-AMON2",
            "properties": {
              "backendPort": 18192,
              "frontendIPConfiguration": {
                "id": "[variables('member2IPConfigId')]"
              },
              "frontendPort": 18192,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-CPRID1",
            "properties": {
              "backendPort": 18208,
              "frontendIPConfiguration": {
                "id": "[variables('member1IPConfigId')]"
              },
              "frontendPort": 18208,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-CPRID2",
            "properties": {
              "backendPort": 18208,
              "frontendIPConfiguration": {
                "id": "[variables('member2IPConfigId')]"
              },
              "frontendPort": 18208,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-ICAPUSH1",
            "properties": {
              "backendPort": 18211,
              "frontendIPConfiguration": {
                "id": "[variables('member1IPConfigId')]"
              },
              "frontendPort": 18211,
              "protocol": "tcp"
            }
          },
          {
            "name": "checkpoint-ICAPUSH2",
            "properties": {
              "backendPort": 18211,
              "frontendIPConfiguration": {
                "id": "[variables('member2IPConfigId')]"
              },
              "frontendPort": 18211,
              "protocol": "tcp"
            }
          }
        ]
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networkSetup')]",
        "[variables('lbId')]",
        "[variables('publicIPAddressId')]"
      ],
      "location": "[parameters('location')]",
      "name": "[concat(parameters('clusterName'), '1-', variables('nic1Name'))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAddress": "[variables('externalPrivateAddresses')[0]]",
              "privateIPAllocationMethod": "Static",
              "PublicIpAddress": {
                "Id": "[variables('publicIPAddressId')]"
              },
              "subnet": {
                "id": "[concat(reference('networkSetup').outputs.vnetId.value, '/subnets/', parameters('subnet1Name'))]"
              },
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-SSH1')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-WEBUI1')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-FWD1')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-CPD1')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-AMON1')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-CPRID1')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-ICAPUSH1')]"
                }
              ]
            }
          }
        ]
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networkSetup')]",
        "[variables('lbId')]"
      ],
      "location": "[parameters('location')]",
      "name": "[concat(parameters('clusterName'), '2-', variables('nic1Name'))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig2",
            "properties": {
              "privateIPAddress": "[variables('externalPrivateAddresses')[1]]",
              "privateIPAllocationMethod": "Static",
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-SSH2')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-WEBUI2')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-FWD2')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-CPD2')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-AMON2')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-CPRID2')]"
                },
                {
                  "id": "[concat(variables('lbId'), '/inboundNatRules/checkpoint-ICAPUSH2')]"
                }
              ],
              "subnet": {
                "id": "[concat(reference('networkSetup').outputs.vnetId.value, '/subnets/', parameters('subnet1Name'))]"
              }
            }
          }
        ]
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networkSetup')]"
      ],
      "location": "[parameters('location')]",
      "name": "[concat(parameters('clusterName'), copyIndex(1), '-', variables('nic2Name'))]",
      "copy": {
        "name": "interface2Copy",
        "count": "[variables('count')]"
      },
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig2",
            "properties": {
              "privateIPAddress": "[variables('subnet2PrivateAddresses')[copyIndex(0)]]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[concat(reference('networkSetup').outputs.vnetId.value, '/subnets/', parameters('subnet2Name'))]"
              }
            }
          }
        ]
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "storageAccountSetup",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('clusterName'), copyIndex(1), '-', variables('nic1Name'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('clusterName'), copyIndex(1), '-', variables('nic2Name'))]"
      ],
      "location": "[parameters('location')]",
      "name": "[concat(parameters('clusterName'), copyIndex(1))]",
      "copy": {
        "name": "virtualMachineCopy",
        "count": "[variables('count')]"
      },
      "plan": "[variables('plan')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[variables('storageAccountUri')]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('clusterName'), copyIndex(1), '-', variables('nic1Name')))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('clusterName'), copyIndex(1), '-', variables('nic2Name')))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "notused",
          "computername": "[concat(toLower(parameters('clusterName')), copyIndex(1))]",
          "customData": "[base64(variables('customData'))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "osDisk",
            "vhd": {
              "uri": "[concat(variables('storageAccountUri'), '/', toLower(parameters('clusterName')), '-', uniqueString(resourceGroup().id, deployment().name), '/osDisk', copyIndex(1), '.vhd')]"
            }
          }
        }
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    }
  ],
  "outputs": {
    "ClusterIPAddr": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId')).IpAddress]"
    },
    "ClusterFQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId')).dnsSettings.fqdn]"
    },
    "Member1IPAddr": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId1')).IpAddress]"
    },
    "Member1FQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId1')).dnsSettings.fqdn]"
    },
    "Member2IPAddr": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId2')).IpAddress]"
    },
    "Member2FQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId2')).dnsSettings.fqdn]"
    }
  }
}